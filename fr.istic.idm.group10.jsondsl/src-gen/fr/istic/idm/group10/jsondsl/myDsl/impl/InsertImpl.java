/**
 * generated by Xtext 2.25.0
 */
package fr.istic.idm.group10.jsondsl.myDsl.impl;

import fr.istic.idm.group10.jsondsl.myDsl.ComplexAttribut;
import fr.istic.idm.group10.jsondsl.myDsl.Insert;
import fr.istic.idm.group10.jsondsl.myDsl.JSonFile;
import fr.istic.idm.group10.jsondsl.myDsl.JSonObject;
import fr.istic.idm.group10.jsondsl.myDsl.MyDslPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Insert</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.istic.idm.group10.jsondsl.myDsl.impl.InsertImpl#getValue <em>Value</em>}</li>
 *   <li>{@link fr.istic.idm.group10.jsondsl.myDsl.impl.InsertImpl#getJsonfile <em>Jsonfile</em>}</li>
 *   <li>{@link fr.istic.idm.group10.jsondsl.myDsl.impl.InsertImpl#getNode <em>Node</em>}</li>
 *   <li>{@link fr.istic.idm.group10.jsondsl.myDsl.impl.InsertImpl#getComplexattribut <em>Complexattribut</em>}</li>
 * </ul>
 *
 * @generated
 */
public class InsertImpl extends MinimalEObjectImpl.Container implements Insert
{
  /**
   * The default value of the '{@link #getValue() <em>Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected static final String VALUE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getValue() <em>Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected String value = VALUE_EDEFAULT;

  /**
   * The cached value of the '{@link #getJsonfile() <em>Jsonfile</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJsonfile()
   * @generated
   * @ordered
   */
  protected EList<JSonFile> jsonfile;

  /**
   * The cached value of the '{@link #getNode() <em>Node</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNode()
   * @generated
   * @ordered
   */
  protected JSonObject node;

  /**
   * The cached value of the '{@link #getComplexattribut() <em>Complexattribut</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComplexattribut()
   * @generated
   * @ordered
   */
  protected ComplexAttribut complexattribut;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected InsertImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.INSERT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValue(String newValue)
  {
    String oldValue = value;
    value = newValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.INSERT__VALUE, oldValue, value));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<JSonFile> getJsonfile()
  {
    if (jsonfile == null)
    {
      jsonfile = new EObjectResolvingEList<JSonFile>(JSonFile.class, this, MyDslPackage.INSERT__JSONFILE);
    }
    return jsonfile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JSonObject getNode()
  {
    if (node != null && node.eIsProxy())
    {
      InternalEObject oldNode = (InternalEObject)node;
      node = (JSonObject)eResolveProxy(oldNode);
      if (node != oldNode)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.INSERT__NODE, oldNode, node));
      }
    }
    return node;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JSonObject basicGetNode()
  {
    return node;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNode(JSonObject newNode)
  {
    JSonObject oldNode = node;
    node = newNode;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.INSERT__NODE, oldNode, node));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComplexAttribut getComplexattribut()
  {
    if (complexattribut != null && complexattribut.eIsProxy())
    {
      InternalEObject oldComplexattribut = (InternalEObject)complexattribut;
      complexattribut = (ComplexAttribut)eResolveProxy(oldComplexattribut);
      if (complexattribut != oldComplexattribut)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.INSERT__COMPLEXATTRIBUT, oldComplexattribut, complexattribut));
      }
    }
    return complexattribut;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComplexAttribut basicGetComplexattribut()
  {
    return complexattribut;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComplexattribut(ComplexAttribut newComplexattribut)
  {
    ComplexAttribut oldComplexattribut = complexattribut;
    complexattribut = newComplexattribut;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.INSERT__COMPLEXATTRIBUT, oldComplexattribut, complexattribut));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.INSERT__VALUE:
        return getValue();
      case MyDslPackage.INSERT__JSONFILE:
        return getJsonfile();
      case MyDslPackage.INSERT__NODE:
        if (resolve) return getNode();
        return basicGetNode();
      case MyDslPackage.INSERT__COMPLEXATTRIBUT:
        if (resolve) return getComplexattribut();
        return basicGetComplexattribut();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.INSERT__VALUE:
        setValue((String)newValue);
        return;
      case MyDslPackage.INSERT__JSONFILE:
        getJsonfile().clear();
        getJsonfile().addAll((Collection<? extends JSonFile>)newValue);
        return;
      case MyDslPackage.INSERT__NODE:
        setNode((JSonObject)newValue);
        return;
      case MyDslPackage.INSERT__COMPLEXATTRIBUT:
        setComplexattribut((ComplexAttribut)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.INSERT__VALUE:
        setValue(VALUE_EDEFAULT);
        return;
      case MyDslPackage.INSERT__JSONFILE:
        getJsonfile().clear();
        return;
      case MyDslPackage.INSERT__NODE:
        setNode((JSonObject)null);
        return;
      case MyDslPackage.INSERT__COMPLEXATTRIBUT:
        setComplexattribut((ComplexAttribut)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.INSERT__VALUE:
        return VALUE_EDEFAULT == null ? value != null : !VALUE_EDEFAULT.equals(value);
      case MyDslPackage.INSERT__JSONFILE:
        return jsonfile != null && !jsonfile.isEmpty();
      case MyDslPackage.INSERT__NODE:
        return node != null;
      case MyDslPackage.INSERT__COMPLEXATTRIBUT:
        return complexattribut != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (value: ");
    result.append(value);
    result.append(')');
    return result.toString();
  }

} //InsertImpl
