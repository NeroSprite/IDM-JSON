/**
 * generated by Xtext 2.25.0
 */
package fr.istic.idm.group10.jsondsl.myDsl.impl;

import fr.istic.idm.group10.jsondsl.myDsl.JSonFile;
import fr.istic.idm.group10.jsondsl.myDsl.JSonObject;
import fr.istic.idm.group10.jsondsl.myDsl.MyDslPackage;
import fr.istic.idm.group10.jsondsl.myDsl.Subset;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Subset</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.istic.idm.group10.jsondsl.myDsl.impl.SubsetImpl#getName <em>Name</em>}</li>
 *   <li>{@link fr.istic.idm.group10.jsondsl.myDsl.impl.SubsetImpl#getJsonfile <em>Jsonfile</em>}</li>
 *   <li>{@link fr.istic.idm.group10.jsondsl.myDsl.impl.SubsetImpl#getListNodes <em>List Nodes</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SubsetImpl extends MinimalEObjectImpl.Container implements Subset
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getJsonfile() <em>Jsonfile</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJsonfile()
   * @generated
   * @ordered
   */
  protected EList<JSonFile> jsonfile;

  /**
   * The cached value of the '{@link #getListNodes() <em>List Nodes</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getListNodes()
   * @generated
   * @ordered
   */
  protected EList<JSonObject> listNodes;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SubsetImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.SUBSET;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SUBSET__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<JSonFile> getJsonfile()
  {
    if (jsonfile == null)
    {
      jsonfile = new EObjectResolvingEList<JSonFile>(JSonFile.class, this, MyDslPackage.SUBSET__JSONFILE);
    }
    return jsonfile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<JSonObject> getListNodes()
  {
    if (listNodes == null)
    {
      listNodes = new EObjectResolvingEList<JSonObject>(JSonObject.class, this, MyDslPackage.SUBSET__LIST_NODES);
    }
    return listNodes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.SUBSET__NAME:
        return getName();
      case MyDslPackage.SUBSET__JSONFILE:
        return getJsonfile();
      case MyDslPackage.SUBSET__LIST_NODES:
        return getListNodes();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.SUBSET__NAME:
        setName((String)newValue);
        return;
      case MyDslPackage.SUBSET__JSONFILE:
        getJsonfile().clear();
        getJsonfile().addAll((Collection<? extends JSonFile>)newValue);
        return;
      case MyDslPackage.SUBSET__LIST_NODES:
        getListNodes().clear();
        getListNodes().addAll((Collection<? extends JSonObject>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.SUBSET__NAME:
        setName(NAME_EDEFAULT);
        return;
      case MyDslPackage.SUBSET__JSONFILE:
        getJsonfile().clear();
        return;
      case MyDslPackage.SUBSET__LIST_NODES:
        getListNodes().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.SUBSET__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case MyDslPackage.SUBSET__JSONFILE:
        return jsonfile != null && !jsonfile.isEmpty();
      case MyDslPackage.SUBSET__LIST_NODES:
        return listNodes != null && !listNodes.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //SubsetImpl
