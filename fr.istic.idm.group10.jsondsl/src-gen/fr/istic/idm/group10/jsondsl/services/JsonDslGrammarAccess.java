/*
 * generated by Xtext 2.25.0
 */
package fr.istic.idm.group10.jsondsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class JsonDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class MainGrammarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.group10.jsondsl.JsonDsl.MainGrammar");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJSonFileParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCommandesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MainGrammar:
		//JSonFile | Commandes
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//JSonFile | Commandes
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//JSonFile
		public RuleCall getJSonFileParserRuleCall_0() { return cJSonFileParserRuleCall_0; }
		
		//Commandes
		public RuleCall getCommandesParserRuleCall_1() { return cCommandesParserRuleCall_1; }
	}
	public class JSonFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.group10.jsondsl.JsonDsl.JSonFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJSonFileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContientAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContientJSonObjectParserRuleCall_3_0 = (RuleCall)cContientAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//JSonFile:
		//'JSonFile' name=STRING '{' (Contient+=JSonObject*) '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'JSonFile' name=STRING '{' (Contient+=JSonObject*) '}'
		public Group getGroup() { return cGroup; }
		
		//'JSonFile'
		public Keyword getJSonFileKeyword_0() { return cJSonFileKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(Contient+=JSonObject*)
		public Assignment getContientAssignment_3() { return cContientAssignment_3; }
		
		//JSonObject
		public RuleCall getContientJSonObjectParserRuleCall_3_0() { return cContientJSonObjectParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class CommandesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.group10.jsondsl.JsonDsl.Commandes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCommandesKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cStoreParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cLoadParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDisplayParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSubsetParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cProjectionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cInsertParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cRemoveParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final RuleCall cModifyParserRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		
		//Commandes:
		//'Commandes'
		//'{'
		//Store | Load | Display | Subset | Projection | Insert | Remove | Modify
		//'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Commandes'
		//'{'
		//Store | Load | Display | Subset | Projection | Insert | Remove | Modify
		//'}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Commandes'
		//'{'
		//Store
		public Group getGroup_0() { return cGroup_0; }
		
		//'Commandes'
		public Keyword getCommandesKeyword_0_0() { return cCommandesKeyword_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }
		
		//Store
		public RuleCall getStoreParserRuleCall_0_2() { return cStoreParserRuleCall_0_2; }
		
		//Load
		public RuleCall getLoadParserRuleCall_1() { return cLoadParserRuleCall_1; }
		
		//Display
		public RuleCall getDisplayParserRuleCall_2() { return cDisplayParserRuleCall_2; }
		
		//Subset
		public RuleCall getSubsetParserRuleCall_3() { return cSubsetParserRuleCall_3; }
		
		//Projection
		public RuleCall getProjectionParserRuleCall_4() { return cProjectionParserRuleCall_4; }
		
		//Insert
		public RuleCall getInsertParserRuleCall_5() { return cInsertParserRuleCall_5; }
		
		//Remove
		public RuleCall getRemoveParserRuleCall_6() { return cRemoveParserRuleCall_6; }
		
		// Modify
		//'}'
		public Group getGroup_7() { return cGroup_7; }
		
		//Modify
		public RuleCall getModifyParserRuleCall_7_0() { return cModifyParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_1() { return cRightCurlyBracketKeyword_7_1; }
	}
	public class JSonObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.group10.jsondsl.JsonDsl.JSonObject");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJsonArrayParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJsonIntegerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cJsonBooleanParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cJSonEnumParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cJSonStringParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cJSonNullParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSumParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cDivParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cMultParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cSubParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//JSonObject:
		//JsonArray | JsonInteger | JsonBoolean | JSonEnum | JSonString | JSonNull | Sum | Div | Mult | Sub;
		@Override public ParserRule getRule() { return rule; }
		
		//JsonArray | JsonInteger | JsonBoolean | JSonEnum | JSonString | JSonNull | Sum | Div | Mult | Sub
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//JsonArray
		public RuleCall getJsonArrayParserRuleCall_0() { return cJsonArrayParserRuleCall_0; }
		
		//JsonInteger
		public RuleCall getJsonIntegerParserRuleCall_1() { return cJsonIntegerParserRuleCall_1; }
		
		//JsonBoolean
		public RuleCall getJsonBooleanParserRuleCall_2() { return cJsonBooleanParserRuleCall_2; }
		
		//JSonEnum
		public RuleCall getJSonEnumParserRuleCall_3() { return cJSonEnumParserRuleCall_3; }
		
		//JSonString
		public RuleCall getJSonStringParserRuleCall_4() { return cJSonStringParserRuleCall_4; }
		
		//JSonNull
		public RuleCall getJSonNullParserRuleCall_5() { return cJSonNullParserRuleCall_5; }
		
		//Sum
		public RuleCall getSumParserRuleCall_6() { return cSumParserRuleCall_6; }
		
		//Div
		public RuleCall getDivParserRuleCall_7() { return cDivParserRuleCall_7; }
		
		//Mult
		public RuleCall getMultParserRuleCall_8() { return cMultParserRuleCall_8; }
		
		//Sub
		public RuleCall getSubParserRuleCall_9() { return cSubParserRuleCall_9; }
	}
	public class JSonAttributElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.group10.jsondsl.JsonDsl.JSonAttribut");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJsonArrayParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJsonIntegerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cJsonBooleanParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cJSonEnumParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cJSonStringParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cJSonNullParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSumParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cDivParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cMultParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cSubParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//JSonAttribut:
		//JsonArray | JsonInteger | JsonBoolean | JSonEnum | JSonString | JSonNull | Sum | Div | Mult | Sub;
		@Override public ParserRule getRule() { return rule; }
		
		//JsonArray | JsonInteger | JsonBoolean | JSonEnum | JSonString | JSonNull | Sum | Div | Mult | Sub
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//JsonArray
		public RuleCall getJsonArrayParserRuleCall_0() { return cJsonArrayParserRuleCall_0; }
		
		//JsonInteger
		public RuleCall getJsonIntegerParserRuleCall_1() { return cJsonIntegerParserRuleCall_1; }
		
		//JsonBoolean
		public RuleCall getJsonBooleanParserRuleCall_2() { return cJsonBooleanParserRuleCall_2; }
		
		//JSonEnum
		public RuleCall getJSonEnumParserRuleCall_3() { return cJSonEnumParserRuleCall_3; }
		
		//JSonString
		public RuleCall getJSonStringParserRuleCall_4() { return cJSonStringParserRuleCall_4; }
		
		//JSonNull
		public RuleCall getJSonNullParserRuleCall_5() { return cJSonNullParserRuleCall_5; }
		
		//Sum
		public RuleCall getSumParserRuleCall_6() { return cSumParserRuleCall_6; }
		
		//Div
		public RuleCall getDivParserRuleCall_7() { return cDivParserRuleCall_7; }
		
		//Mult
		public RuleCall getMultParserRuleCall_8() { return cMultParserRuleCall_8; }
		
		//Sub
		public RuleCall getSubParserRuleCall_9() { return cSubParserRuleCall_9; }
	}
	public class StoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.group10.jsondsl.JsonDsl.Store");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStoreKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cPathKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPathAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPathSTRINGTerminalRuleCall_3_0 = (RuleCall)cPathAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cNameKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameSTRINGTerminalRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		///* Load and Store */
		//Store :
		//'Store'
		//'{'
		//'path' path=STRING ','
		//'name' name=STRING
		//'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Store'
		//'{'
		//'path' path=STRING ','
		//'name' name=STRING
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Store'
		public Keyword getStoreKeyword_0() { return cStoreKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'path'
		public Keyword getPathKeyword_2() { return cPathKeyword_2; }
		
		//path=STRING
		public Assignment getPathAssignment_3() { return cPathAssignment_3; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_3_0() { return cPathSTRINGTerminalRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//'name'
		public Keyword getNameKeyword_5() { return cNameKeyword_5; }
		
		//name=STRING
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_6_0() { return cNameSTRINGTerminalRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class LoadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.group10.jsondsl.JsonDsl.Load");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cPathKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPathAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPathSTRINGTerminalRuleCall_3_0 = (RuleCall)cPathAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cNameKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameSTRINGTerminalRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Load:
		//'Load'
		//'{'
		//'path' path=STRING ','
		//'name' name=STRING
		//'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Load'
		//'{'
		//'path' path=STRING ','
		//'name' name=STRING
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Load'
		public Keyword getLoadKeyword_0() { return cLoadKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'path'
		public Keyword getPathKeyword_2() { return cPathKeyword_2; }
		
		//path=STRING
		public Assignment getPathAssignment_3() { return cPathAssignment_3; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_3_0() { return cPathSTRINGTerminalRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//'name'
		public Keyword getNameKeyword_5() { return cNameKeyword_5; }
		
		//name=STRING
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_6_0() { return cNameSTRINGTerminalRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class DisplayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.group10.jsondsl.JsonDsl.Display");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDisplayKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cJsonfileKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cJsonfileAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cJsonfileJSonFileParserRuleCall_3_0 = (RuleCall)cJsonfileAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		///* Display */
		//Display:
		//'Display'
		//'{'
		//'jsonfile' jsonfile+=JSonFile
		//'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Display'
		//'{'
		//'jsonfile' jsonfile+=JSonFile
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Display'
		public Keyword getDisplayKeyword_0() { return cDisplayKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'jsonfile'
		public Keyword getJsonfileKeyword_2() { return cJsonfileKeyword_2; }
		
		//jsonfile+=JSonFile
		public Assignment getJsonfileAssignment_3() { return cJsonfileAssignment_3; }
		
		//JSonFile
		public RuleCall getJsonfileJSonFileParserRuleCall_3_0() { return cJsonfileJSonFileParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SubsetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.group10.jsondsl.JsonDsl.Subset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubsetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cJsonfileKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cJsonfileAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cJsonfileJSonFileParserRuleCall_3_0 = (RuleCall)cJsonfileAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cListNodesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cListNodesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cListNodesJSonObjectParserRuleCall_7_0 = (RuleCall)cListNodesAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cListNodesAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cListNodesJSonObjectParserRuleCall_8_1_0 = (RuleCall)cListNodesAssignment_8_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		///* Replace */
		//Subset:
		//'Subset'
		//'{'
		//'jsonfile' jsonfile+=JSonFile ','
		//'listNodes' '(' listNodes+=JSonObject ( "," listNodes+=JSonObject)* ')'
		//'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Subset'
		//'{'
		//'jsonfile' jsonfile+=JSonFile ','
		//'listNodes' '(' listNodes+=JSonObject ( "," listNodes+=JSonObject)* ')'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Subset'
		public Keyword getSubsetKeyword_0() { return cSubsetKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'jsonfile'
		public Keyword getJsonfileKeyword_2() { return cJsonfileKeyword_2; }
		
		//jsonfile+=JSonFile
		public Assignment getJsonfileAssignment_3() { return cJsonfileAssignment_3; }
		
		//JSonFile
		public RuleCall getJsonfileJSonFileParserRuleCall_3_0() { return cJsonfileJSonFileParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//'listNodes'
		public Keyword getListNodesKeyword_5() { return cListNodesKeyword_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }
		
		//listNodes+=JSonObject
		public Assignment getListNodesAssignment_7() { return cListNodesAssignment_7; }
		
		//JSonObject
		public RuleCall getListNodesJSonObjectParserRuleCall_7_0() { return cListNodesJSonObjectParserRuleCall_7_0; }
		
		//( "," listNodes+=JSonObject)*
		public Group getGroup_8() { return cGroup_8; }
		
		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }
		
		//listNodes+=JSonObject
		public Assignment getListNodesAssignment_8_1() { return cListNodesAssignment_8_1; }
		
		//JSonObject
		public RuleCall getListNodesJSonObjectParserRuleCall_8_1_0() { return cListNodesJSonObjectParserRuleCall_8_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class ProjectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.group10.jsondsl.JsonDsl.Projection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProjectionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cJsonfileKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cJsonfileAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cJsonfileJSonFileParserRuleCall_3_0 = (RuleCall)cJsonfileAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cNodeKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNodeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNodeJSonObjectParserRuleCall_6_0 = (RuleCall)cNodeAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Projection:
		//'Projection'
		//'{'
		//'jsonfile' jsonfile+=JSonFile ','
		//'node' node=JSonObject
		//'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Projection'
		//'{'
		//'jsonfile' jsonfile+=JSonFile ','
		//'node' node=JSonObject
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Projection'
		public Keyword getProjectionKeyword_0() { return cProjectionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'jsonfile'
		public Keyword getJsonfileKeyword_2() { return cJsonfileKeyword_2; }
		
		//jsonfile+=JSonFile
		public Assignment getJsonfileAssignment_3() { return cJsonfileAssignment_3; }
		
		//JSonFile
		public RuleCall getJsonfileJSonFileParserRuleCall_3_0() { return cJsonfileJSonFileParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//'node'
		public Keyword getNodeKeyword_5() { return cNodeKeyword_5; }
		
		//node=JSonObject
		public Assignment getNodeAssignment_6() { return cNodeAssignment_6; }
		
		//JSonObject
		public RuleCall getNodeJSonObjectParserRuleCall_6_0() { return cNodeJSonObjectParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class InsertElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.group10.jsondsl.JsonDsl.Insert");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInsertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cJsonFileTargetKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cJsonfileAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cJsonfileJSonFileParserRuleCall_4_0 = (RuleCall)cJsonfileAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cJsonFileSourceKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cJsonfileAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cJsonfileJSonFileParserRuleCall_7_0 = (RuleCall)cJsonfileAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cObjectKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cNodeAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cNodeJSonObjectParserRuleCall_11_0 = (RuleCall)cNodeAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		///* Modification On File */
		//Insert:
		//'Insert'
		//'{'
		//'(' 'JsonFileTarget' jsonfile+=JSonFile ',' 'JsonFileSource' jsonfile+=JSonFile ')' ','
		//'Object:' node=JSonObject
		//'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Insert'
		//'{'
		//'(' 'JsonFileTarget' jsonfile+=JSonFile ',' 'JsonFileSource' jsonfile+=JSonFile ')' ','
		//'Object:' node=JSonObject
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Insert'
		public Keyword getInsertKeyword_0() { return cInsertKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//'JsonFileTarget'
		public Keyword getJsonFileTargetKeyword_3() { return cJsonFileTargetKeyword_3; }
		
		//jsonfile+=JSonFile
		public Assignment getJsonfileAssignment_4() { return cJsonfileAssignment_4; }
		
		//JSonFile
		public RuleCall getJsonfileJSonFileParserRuleCall_4_0() { return cJsonfileJSonFileParserRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//'JsonFileSource'
		public Keyword getJsonFileSourceKeyword_6() { return cJsonFileSourceKeyword_6; }
		
		//jsonfile+=JSonFile
		public Assignment getJsonfileAssignment_7() { return cJsonfileAssignment_7; }
		
		//JSonFile
		public RuleCall getJsonfileJSonFileParserRuleCall_7_0() { return cJsonfileJSonFileParserRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
		
		//','
		public Keyword getCommaKeyword_9() { return cCommaKeyword_9; }
		
		//'Object:'
		public Keyword getObjectKeyword_10() { return cObjectKeyword_10; }
		
		//node=JSonObject
		public Assignment getNodeAssignment_11() { return cNodeAssignment_11; }
		
		//JSonObject
		public RuleCall getNodeJSonObjectParserRuleCall_11_0() { return cNodeJSonObjectParserRuleCall_11_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class RemoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.group10.jsondsl.JsonDsl.Remove");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cJsonFileTargetKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cJsonfileAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cJsonfileJSonFileParserRuleCall_3_0 = (RuleCall)cJsonfileAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cObjectKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNodeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNodeJSonObjectParserRuleCall_6_0 = (RuleCall)cNodeAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Remove:
		//'Remove'
		//'{'
		//'JsonFileTarget' jsonfile+=JSonFile ','
		//'Object:' node=JSonObject
		//'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Remove'
		//'{'
		//'JsonFileTarget' jsonfile+=JSonFile ','
		//'Object:' node=JSonObject
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Remove'
		public Keyword getRemoveKeyword_0() { return cRemoveKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'JsonFileTarget'
		public Keyword getJsonFileTargetKeyword_2() { return cJsonFileTargetKeyword_2; }
		
		//jsonfile+=JSonFile
		public Assignment getJsonfileAssignment_3() { return cJsonfileAssignment_3; }
		
		//JSonFile
		public RuleCall getJsonfileJSonFileParserRuleCall_3_0() { return cJsonfileJSonFileParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//'Object:'
		public Keyword getObjectKeyword_5() { return cObjectKeyword_5; }
		
		//node=JSonObject
		public Assignment getNodeAssignment_6() { return cNodeAssignment_6; }
		
		//JSonObject
		public RuleCall getNodeJSonObjectParserRuleCall_6_0() { return cNodeJSonObjectParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ModifyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.group10.jsondsl.JsonDsl.Modify");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModifyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cJsonFileTargetKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cJsonfileAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cJsonfileJSonFileParserRuleCall_4_0 = (RuleCall)cJsonfileAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cJsonFileSourceKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cJsonfileAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cJsonfileJSonFileParserRuleCall_7_0 = (RuleCall)cJsonfileAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cObjectKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cNodeAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cNodeJSonObjectParserRuleCall_11_0 = (RuleCall)cNodeAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Modify:
		//'Modify'
		//'{'
		//'(' 'JsonFileTarget' jsonfile+=JSonFile ',' 'JsonFileSource' jsonfile+=JSonFile ')' ','
		//'Object:' node=JSonObject
		//'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Modify'
		//'{'
		//'(' 'JsonFileTarget' jsonfile+=JSonFile ',' 'JsonFileSource' jsonfile+=JSonFile ')' ','
		//'Object:' node=JSonObject
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Modify'
		public Keyword getModifyKeyword_0() { return cModifyKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//'JsonFileTarget'
		public Keyword getJsonFileTargetKeyword_3() { return cJsonFileTargetKeyword_3; }
		
		//jsonfile+=JSonFile
		public Assignment getJsonfileAssignment_4() { return cJsonfileAssignment_4; }
		
		//JSonFile
		public RuleCall getJsonfileJSonFileParserRuleCall_4_0() { return cJsonfileJSonFileParserRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//'JsonFileSource'
		public Keyword getJsonFileSourceKeyword_6() { return cJsonFileSourceKeyword_6; }
		
		//jsonfile+=JSonFile
		public Assignment getJsonfileAssignment_7() { return cJsonfileAssignment_7; }
		
		//JSonFile
		public RuleCall getJsonfileJSonFileParserRuleCall_7_0() { return cJsonfileJSonFileParserRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
		
		//','
		public Keyword getCommaKeyword_9() { return cCommaKeyword_9; }
		
		//'Object:'
		public Keyword getObjectKeyword_10() { return cObjectKeyword_10; }
		
		//node=JSonObject
		public Assignment getNodeAssignment_11() { return cNodeAssignment_11; }
		
		//JSonObject
		public RuleCall getNodeJSonObjectParserRuleCall_11_0() { return cNodeJSonObjectParserRuleCall_11_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class JsonArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.group10.jsondsl.JsonDsl.JsonArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJSonArrayKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContientAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContientJSonAttributParserRuleCall_3_0 = (RuleCall)cContientAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cContientAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cContientJSonAttributParserRuleCall_4_1_0 = (RuleCall)cContientAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///* ATTRIBUT COMPLEX */
		//JsonArray:
		//'JSonArray'
		//name=STRING '{'
		//Contient+=JSonAttribut ( "," Contient+=JSonAttribut)*
		//'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'JSonArray'
		//name=STRING '{'
		//Contient+=JSonAttribut ( "," Contient+=JSonAttribut)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'JSonArray'
		public Keyword getJSonArrayKeyword_0() { return cJSonArrayKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//Contient+=JSonAttribut
		public Assignment getContientAssignment_3() { return cContientAssignment_3; }
		
		//JSonAttribut
		public RuleCall getContientJSonAttributParserRuleCall_3_0() { return cContientJSonAttributParserRuleCall_3_0; }
		
		//( "," Contient+=JSonAttribut)*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//Contient+=JSonAttribut
		public Assignment getContientAssignment_4_1() { return cContientAssignment_4_1; }
		
		//JSonAttribut
		public RuleCall getContientJSonAttributParserRuleCall_4_1_0() { return cContientJSonAttributParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class JSonEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.group10.jsondsl.JsonDsl.JSonEnum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJSonEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContientAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContientJSonAttributParserRuleCall_3_0 = (RuleCall)cContientAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cContientAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cContientJSonAttributParserRuleCall_4_1_0 = (RuleCall)cContientAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//JSonEnum:
		//'JSonEnum'
		//name=STRING
		//'[' Contient+=JSonAttribut ( "," Contient+=JSonAttribut)* ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'JSonEnum'
		//name=STRING
		//'[' Contient+=JSonAttribut ( "," Contient+=JSonAttribut)* ']'
		public Group getGroup() { return cGroup; }
		
		//'JSonEnum'
		public Keyword getJSonEnumKeyword_0() { return cJSonEnumKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//Contient+=JSonAttribut
		public Assignment getContientAssignment_3() { return cContientAssignment_3; }
		
		//JSonAttribut
		public RuleCall getContientJSonAttributParserRuleCall_3_0() { return cContientJSonAttributParserRuleCall_3_0; }
		
		//( "," Contient+=JSonAttribut)*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//Contient+=JSonAttribut
		public Assignment getContientAssignment_4_1() { return cContientAssignment_4_1; }
		
		//JSonAttribut
		public RuleCall getContientJSonAttributParserRuleCall_4_1_0() { return cContientJSonAttributParserRuleCall_4_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	public class JsonIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.group10.jsondsl.JsonDsl.JsonInteger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntegerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		///* ATTRIBUT SIMPLE */
		//JsonInteger:
		//'Integer'
		//name=STRING
		//value=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Integer'
		//name=STRING
		//value=INT
		public Group getGroup() { return cGroup; }
		
		//'Integer'
		public Keyword getIntegerKeyword_0() { return cIntegerKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}
	public class JsonBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.group10.jsondsl.JsonDsl.JsonBoolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBooleanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cValueAlternatives_2_0 = (Alternatives)cValueAssignment_2.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_0_0 = (Keyword)cValueAlternatives_2_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_0_1 = (Keyword)cValueAlternatives_2_0.eContents().get(1);
		
		//JsonBoolean:
		//'Boolean'
		//name=STRING
		//value=('true' | 'false')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Boolean'
		//name=STRING
		//value=('true' | 'false')
		public Group getGroup() { return cGroup; }
		
		//'Boolean'
		public Keyword getBooleanKeyword_0() { return cBooleanKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_2_0() { return cValueAlternatives_2_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_2_0_0() { return cValueTrueKeyword_2_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_2_0_1() { return cValueFalseKeyword_2_0_1; }
	}
	public class JSonStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.group10.jsondsl.JsonDsl.JSonString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//JSonString:
		//'String'
		//name=STRING
		//value=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'String'
		//name=STRING
		//value=STRING
		public Group getGroup() { return cGroup; }
		
		//'String'
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class JSonNullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.group10.jsondsl.JsonDsl.JSonNull");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNullKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//JSonNull:
		//'Null'
		//name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Null'
		//name=STRING
		public Group getGroup() { return cGroup; }
		
		//'Null'
		public Keyword getNullKeyword_0() { return cNullKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class SumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.group10.jsondsl.JsonDsl.Sum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cListIntergerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cListIntergerJsonIntegerParserRuleCall_3_0 = (RuleCall)cListIntergerAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cListIntergerAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cListIntergerJsonIntegerParserRuleCall_4_1_0 = (RuleCall)cListIntergerAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///* OPPERATION */
		//Sum:
		//'Sum'
		//name=STRING
		//'['
		//listInterger+=JsonInteger ( "," listInterger+=JsonInteger)*
		//']';
		@Override public ParserRule getRule() { return rule; }
		
		//'Sum'
		//name=STRING
		//'['
		//listInterger+=JsonInteger ( "," listInterger+=JsonInteger)*
		//']'
		public Group getGroup() { return cGroup; }
		
		//'Sum'
		public Keyword getSumKeyword_0() { return cSumKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//listInterger+=JsonInteger
		public Assignment getListIntergerAssignment_3() { return cListIntergerAssignment_3; }
		
		//JsonInteger
		public RuleCall getListIntergerJsonIntegerParserRuleCall_3_0() { return cListIntergerJsonIntegerParserRuleCall_3_0; }
		
		//( "," listInterger+=JsonInteger)*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//listInterger+=JsonInteger
		public Assignment getListIntergerAssignment_4_1() { return cListIntergerAssignment_4_1; }
		
		//JsonInteger
		public RuleCall getListIntergerJsonIntegerParserRuleCall_4_1_0() { return cListIntergerJsonIntegerParserRuleCall_4_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	public class DivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.group10.jsondsl.JsonDsl.Div");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDivKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cListIntergerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cListIntergerJsonIntegerParserRuleCall_3_0 = (RuleCall)cListIntergerAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cListIntergerAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cListIntergerJsonIntegerParserRuleCall_4_1_0 = (RuleCall)cListIntergerAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Div:
		//'Div'
		//name=STRING
		//'['
		//listInterger+=JsonInteger ( "," listInterger+=JsonInteger)*
		//']';
		@Override public ParserRule getRule() { return rule; }
		
		//'Div'
		//name=STRING
		//'['
		//listInterger+=JsonInteger ( "," listInterger+=JsonInteger)*
		//']'
		public Group getGroup() { return cGroup; }
		
		//'Div'
		public Keyword getDivKeyword_0() { return cDivKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//listInterger+=JsonInteger
		public Assignment getListIntergerAssignment_3() { return cListIntergerAssignment_3; }
		
		//JsonInteger
		public RuleCall getListIntergerJsonIntegerParserRuleCall_3_0() { return cListIntergerJsonIntegerParserRuleCall_3_0; }
		
		//( "," listInterger+=JsonInteger)*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//listInterger+=JsonInteger
		public Assignment getListIntergerAssignment_4_1() { return cListIntergerAssignment_4_1; }
		
		//JsonInteger
		public RuleCall getListIntergerJsonIntegerParserRuleCall_4_1_0() { return cListIntergerJsonIntegerParserRuleCall_4_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	public class MultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.group10.jsondsl.JsonDsl.Mult");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cListIntergerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cListIntergerJsonIntegerParserRuleCall_3_0 = (RuleCall)cListIntergerAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cListIntergerAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cListIntergerJsonIntegerParserRuleCall_4_1_0 = (RuleCall)cListIntergerAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Mult :
		//'Mult'
		//name=STRING
		//'['
		//listInterger+=JsonInteger ( "," listInterger+=JsonInteger)*
		//']';
		@Override public ParserRule getRule() { return rule; }
		
		//'Mult'
		//name=STRING
		//'['
		//listInterger+=JsonInteger ( "," listInterger+=JsonInteger)*
		//']'
		public Group getGroup() { return cGroup; }
		
		//'Mult'
		public Keyword getMultKeyword_0() { return cMultKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//listInterger+=JsonInteger
		public Assignment getListIntergerAssignment_3() { return cListIntergerAssignment_3; }
		
		//JsonInteger
		public RuleCall getListIntergerJsonIntegerParserRuleCall_3_0() { return cListIntergerJsonIntegerParserRuleCall_3_0; }
		
		//( "," listInterger+=JsonInteger)*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//listInterger+=JsonInteger
		public Assignment getListIntergerAssignment_4_1() { return cListIntergerAssignment_4_1; }
		
		//JsonInteger
		public RuleCall getListIntergerJsonIntegerParserRuleCall_4_1_0() { return cListIntergerJsonIntegerParserRuleCall_4_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	public class SubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.group10.jsondsl.JsonDsl.Sub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cListIntergerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cListIntergerJsonIntegerParserRuleCall_3_0 = (RuleCall)cListIntergerAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cListIntergerAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cListIntergerJsonIntegerParserRuleCall_4_1_0 = (RuleCall)cListIntergerAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Sub:
		//'Sub'
		//name=STRING
		//'['
		//listInterger+=JsonInteger ( "," listInterger+=JsonInteger)*
		//']';
		@Override public ParserRule getRule() { return rule; }
		
		//'Sub'
		//name=STRING
		//'['
		//listInterger+=JsonInteger ( "," listInterger+=JsonInteger)*
		//']'
		public Group getGroup() { return cGroup; }
		
		//'Sub'
		public Keyword getSubKeyword_0() { return cSubKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//listInterger+=JsonInteger
		public Assignment getListIntergerAssignment_3() { return cListIntergerAssignment_3; }
		
		//JsonInteger
		public RuleCall getListIntergerJsonIntegerParserRuleCall_3_0() { return cListIntergerJsonIntegerParserRuleCall_3_0; }
		
		//( "," listInterger+=JsonInteger)*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//listInterger+=JsonInteger
		public Assignment getListIntergerAssignment_4_1() { return cListIntergerAssignment_4_1; }
		
		//JsonInteger
		public RuleCall getListIntergerJsonIntegerParserRuleCall_4_1_0() { return cListIntergerJsonIntegerParserRuleCall_4_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.group10.jsondsl.JsonDsl.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cEBooleanAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cTrueKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cEBooleanAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFalseKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		///* TYPE */
		//EBoolean returns EBoolean:
		//{EBoolean} 'true' | {EBoolean} 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//{EBoolean} 'true' | {EBoolean} 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{EBoolean} 'true'
		public Group getGroup_0() { return cGroup_0; }
		
		//{EBoolean}
		public Action getEBooleanAction_0_0() { return cEBooleanAction_0_0; }
		
		//'true'
		public Keyword getTrueKeyword_0_1() { return cTrueKeyword_0_1; }
		
		//{EBoolean} 'false'
		public Group getGroup_1() { return cGroup_1; }
		
		//{EBoolean}
		public Action getEBooleanAction_1_0() { return cEBooleanAction_1_0; }
		
		//'false'
		public Keyword getFalseKeyword_1_1() { return cFalseKeyword_1_1; }
	}
	
	
	private final MainGrammarElements pMainGrammar;
	private final JSonFileElements pJSonFile;
	private final CommandesElements pCommandes;
	private final JSonObjectElements pJSonObject;
	private final JSonAttributElements pJSonAttribut;
	private final StoreElements pStore;
	private final LoadElements pLoad;
	private final DisplayElements pDisplay;
	private final SubsetElements pSubset;
	private final ProjectionElements pProjection;
	private final InsertElements pInsert;
	private final RemoveElements pRemove;
	private final ModifyElements pModify;
	private final JsonArrayElements pJsonArray;
	private final JSonEnumElements pJSonEnum;
	private final JsonIntegerElements pJsonInteger;
	private final JsonBooleanElements pJsonBoolean;
	private final JSonStringElements pJSonString;
	private final JSonNullElements pJSonNull;
	private final SumElements pSum;
	private final DivElements pDiv;
	private final MultElements pMult;
	private final SubElements pSub;
	private final EBooleanElements pEBoolean;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public JsonDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMainGrammar = new MainGrammarElements();
		this.pJSonFile = new JSonFileElements();
		this.pCommandes = new CommandesElements();
		this.pJSonObject = new JSonObjectElements();
		this.pJSonAttribut = new JSonAttributElements();
		this.pStore = new StoreElements();
		this.pLoad = new LoadElements();
		this.pDisplay = new DisplayElements();
		this.pSubset = new SubsetElements();
		this.pProjection = new ProjectionElements();
		this.pInsert = new InsertElements();
		this.pRemove = new RemoveElements();
		this.pModify = new ModifyElements();
		this.pJsonArray = new JsonArrayElements();
		this.pJSonEnum = new JSonEnumElements();
		this.pJsonInteger = new JsonIntegerElements();
		this.pJsonBoolean = new JsonBooleanElements();
		this.pJSonString = new JSonStringElements();
		this.pJSonNull = new JSonNullElements();
		this.pSum = new SumElements();
		this.pDiv = new DivElements();
		this.pMult = new MultElements();
		this.pSub = new SubElements();
		this.pEBoolean = new EBooleanElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.istic.idm.group10.jsondsl.JsonDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MainGrammar:
	//JSonFile | Commandes
	//;
	public MainGrammarElements getMainGrammarAccess() {
		return pMainGrammar;
	}
	
	public ParserRule getMainGrammarRule() {
		return getMainGrammarAccess().getRule();
	}
	
	//JSonFile:
	//'JSonFile' name=STRING '{' (Contient+=JSonObject*) '}';
	public JSonFileElements getJSonFileAccess() {
		return pJSonFile;
	}
	
	public ParserRule getJSonFileRule() {
		return getJSonFileAccess().getRule();
	}
	
	//Commandes:
	//'Commandes'
	//'{'
	//Store | Load | Display | Subset | Projection | Insert | Remove | Modify
	//'}';
	public CommandesElements getCommandesAccess() {
		return pCommandes;
	}
	
	public ParserRule getCommandesRule() {
		return getCommandesAccess().getRule();
	}
	
	//JSonObject:
	//JsonArray | JsonInteger | JsonBoolean | JSonEnum | JSonString | JSonNull | Sum | Div | Mult | Sub;
	public JSonObjectElements getJSonObjectAccess() {
		return pJSonObject;
	}
	
	public ParserRule getJSonObjectRule() {
		return getJSonObjectAccess().getRule();
	}
	
	//JSonAttribut:
	//JsonArray | JsonInteger | JsonBoolean | JSonEnum | JSonString | JSonNull | Sum | Div | Mult | Sub;
	public JSonAttributElements getJSonAttributAccess() {
		return pJSonAttribut;
	}
	
	public ParserRule getJSonAttributRule() {
		return getJSonAttributAccess().getRule();
	}
	
	///* Load and Store */
	//Store :
	//'Store'
	//'{'
	//'path' path=STRING ','
	//'name' name=STRING
	//'}';
	public StoreElements getStoreAccess() {
		return pStore;
	}
	
	public ParserRule getStoreRule() {
		return getStoreAccess().getRule();
	}
	
	//Load:
	//'Load'
	//'{'
	//'path' path=STRING ','
	//'name' name=STRING
	//'}';
	public LoadElements getLoadAccess() {
		return pLoad;
	}
	
	public ParserRule getLoadRule() {
		return getLoadAccess().getRule();
	}
	
	///* Display */
	//Display:
	//'Display'
	//'{'
	//'jsonfile' jsonfile+=JSonFile
	//'}';
	public DisplayElements getDisplayAccess() {
		return pDisplay;
	}
	
	public ParserRule getDisplayRule() {
		return getDisplayAccess().getRule();
	}
	
	///* Replace */
	//Subset:
	//'Subset'
	//'{'
	//'jsonfile' jsonfile+=JSonFile ','
	//'listNodes' '(' listNodes+=JSonObject ( "," listNodes+=JSonObject)* ')'
	//'}';
	public SubsetElements getSubsetAccess() {
		return pSubset;
	}
	
	public ParserRule getSubsetRule() {
		return getSubsetAccess().getRule();
	}
	
	//Projection:
	//'Projection'
	//'{'
	//'jsonfile' jsonfile+=JSonFile ','
	//'node' node=JSonObject
	//'}';
	public ProjectionElements getProjectionAccess() {
		return pProjection;
	}
	
	public ParserRule getProjectionRule() {
		return getProjectionAccess().getRule();
	}
	
	///* Modification On File */
	//Insert:
	//'Insert'
	//'{'
	//'(' 'JsonFileTarget' jsonfile+=JSonFile ',' 'JsonFileSource' jsonfile+=JSonFile ')' ','
	//'Object:' node=JSonObject
	//'}';
	public InsertElements getInsertAccess() {
		return pInsert;
	}
	
	public ParserRule getInsertRule() {
		return getInsertAccess().getRule();
	}
	
	//Remove:
	//'Remove'
	//'{'
	//'JsonFileTarget' jsonfile+=JSonFile ','
	//'Object:' node=JSonObject
	//'}';
	public RemoveElements getRemoveAccess() {
		return pRemove;
	}
	
	public ParserRule getRemoveRule() {
		return getRemoveAccess().getRule();
	}
	
	//Modify:
	//'Modify'
	//'{'
	//'(' 'JsonFileTarget' jsonfile+=JSonFile ',' 'JsonFileSource' jsonfile+=JSonFile ')' ','
	//'Object:' node=JSonObject
	//'}';
	public ModifyElements getModifyAccess() {
		return pModify;
	}
	
	public ParserRule getModifyRule() {
		return getModifyAccess().getRule();
	}
	
	///* ATTRIBUT COMPLEX */
	//JsonArray:
	//'JSonArray'
	//name=STRING '{'
	//Contient+=JSonAttribut ( "," Contient+=JSonAttribut)*
	//'}';
	public JsonArrayElements getJsonArrayAccess() {
		return pJsonArray;
	}
	
	public ParserRule getJsonArrayRule() {
		return getJsonArrayAccess().getRule();
	}
	
	//JSonEnum:
	//'JSonEnum'
	//name=STRING
	//'[' Contient+=JSonAttribut ( "," Contient+=JSonAttribut)* ']'
	//;
	public JSonEnumElements getJSonEnumAccess() {
		return pJSonEnum;
	}
	
	public ParserRule getJSonEnumRule() {
		return getJSonEnumAccess().getRule();
	}
	
	///* ATTRIBUT SIMPLE */
	//JsonInteger:
	//'Integer'
	//name=STRING
	//value=INT
	//;
	public JsonIntegerElements getJsonIntegerAccess() {
		return pJsonInteger;
	}
	
	public ParserRule getJsonIntegerRule() {
		return getJsonIntegerAccess().getRule();
	}
	
	//JsonBoolean:
	//'Boolean'
	//name=STRING
	//value=('true' | 'false')
	//;
	public JsonBooleanElements getJsonBooleanAccess() {
		return pJsonBoolean;
	}
	
	public ParserRule getJsonBooleanRule() {
		return getJsonBooleanAccess().getRule();
	}
	
	//JSonString:
	//'String'
	//name=STRING
	//value=STRING
	//;
	public JSonStringElements getJSonStringAccess() {
		return pJSonString;
	}
	
	public ParserRule getJSonStringRule() {
		return getJSonStringAccess().getRule();
	}
	
	//JSonNull:
	//'Null'
	//name=STRING;
	public JSonNullElements getJSonNullAccess() {
		return pJSonNull;
	}
	
	public ParserRule getJSonNullRule() {
		return getJSonNullAccess().getRule();
	}
	
	///* OPPERATION */
	//Sum:
	//'Sum'
	//name=STRING
	//'['
	//listInterger+=JsonInteger ( "," listInterger+=JsonInteger)*
	//']';
	public SumElements getSumAccess() {
		return pSum;
	}
	
	public ParserRule getSumRule() {
		return getSumAccess().getRule();
	}
	
	//Div:
	//'Div'
	//name=STRING
	//'['
	//listInterger+=JsonInteger ( "," listInterger+=JsonInteger)*
	//']';
	public DivElements getDivAccess() {
		return pDiv;
	}
	
	public ParserRule getDivRule() {
		return getDivAccess().getRule();
	}
	
	//Mult :
	//'Mult'
	//name=STRING
	//'['
	//listInterger+=JsonInteger ( "," listInterger+=JsonInteger)*
	//']';
	public MultElements getMultAccess() {
		return pMult;
	}
	
	public ParserRule getMultRule() {
		return getMultAccess().getRule();
	}
	
	//Sub:
	//'Sub'
	//name=STRING
	//'['
	//listInterger+=JsonInteger ( "," listInterger+=JsonInteger)*
	//']';
	public SubElements getSubAccess() {
		return pSub;
	}
	
	public ParserRule getSubRule() {
		return getSubAccess().getRule();
	}
	
	///* TYPE */
	//EBoolean returns EBoolean:
	//{EBoolean} 'true' | {EBoolean} 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
