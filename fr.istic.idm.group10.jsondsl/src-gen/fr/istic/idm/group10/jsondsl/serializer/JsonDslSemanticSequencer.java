/*
 * generated by Xtext 2.25.0
 */
package fr.istic.idm.group10.jsondsl.serializer;

import com.google.inject.Inject;
import fr.istic.idm.group10.jsondsl.myDsl.Commandes;
import fr.istic.idm.group10.jsondsl.myDsl.ComplexAttribut;
import fr.istic.idm.group10.jsondsl.myDsl.Display;
import fr.istic.idm.group10.jsondsl.myDsl.Div;
import fr.istic.idm.group10.jsondsl.myDsl.EBoolean;
import fr.istic.idm.group10.jsondsl.myDsl.Insert;
import fr.istic.idm.group10.jsondsl.myDsl.JSonAttribut;
import fr.istic.idm.group10.jsondsl.myDsl.JSonEnum;
import fr.istic.idm.group10.jsondsl.myDsl.JSonFile;
import fr.istic.idm.group10.jsondsl.myDsl.JSonNull;
import fr.istic.idm.group10.jsondsl.myDsl.JSonObject;
import fr.istic.idm.group10.jsondsl.myDsl.JSonString;
import fr.istic.idm.group10.jsondsl.myDsl.JsonArray;
import fr.istic.idm.group10.jsondsl.myDsl.JsonBoolean;
import fr.istic.idm.group10.jsondsl.myDsl.JsonInteger;
import fr.istic.idm.group10.jsondsl.myDsl.Load;
import fr.istic.idm.group10.jsondsl.myDsl.Modify;
import fr.istic.idm.group10.jsondsl.myDsl.Mult;
import fr.istic.idm.group10.jsondsl.myDsl.MyDslPackage;
import fr.istic.idm.group10.jsondsl.myDsl.Operation;
import fr.istic.idm.group10.jsondsl.myDsl.Projection;
import fr.istic.idm.group10.jsondsl.myDsl.Remove;
import fr.istic.idm.group10.jsondsl.myDsl.Select;
import fr.istic.idm.group10.jsondsl.myDsl.SimpleAttribut;
import fr.istic.idm.group10.jsondsl.myDsl.Store;
import fr.istic.idm.group10.jsondsl.myDsl.Sub;
import fr.istic.idm.group10.jsondsl.myDsl.Subset;
import fr.istic.idm.group10.jsondsl.myDsl.Sum;
import fr.istic.idm.group10.jsondsl.services.JsonDslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class JsonDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private JsonDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.COMMANDES:
				sequence_Commandes_Impl(context, (Commandes) semanticObject); 
				return; 
			case MyDslPackage.COMPLEX_ATTRIBUT:
				sequence_ComplexAttribut_Impl(context, (ComplexAttribut) semanticObject); 
				return; 
			case MyDslPackage.DISPLAY:
				sequence_Display(context, (Display) semanticObject); 
				return; 
			case MyDslPackage.DIV:
				sequence_Div(context, (Div) semanticObject); 
				return; 
			case MyDslPackage.EBOOLEAN:
				sequence_EBoolean(context, (EBoolean) semanticObject); 
				return; 
			case MyDslPackage.INSERT:
				sequence_Insert(context, (Insert) semanticObject); 
				return; 
			case MyDslPackage.JSON_ATTRIBUT:
				sequence_JSonAttribut_Impl(context, (JSonAttribut) semanticObject); 
				return; 
			case MyDslPackage.JSON_ENUM:
				sequence_JSonEnum(context, (JSonEnum) semanticObject); 
				return; 
			case MyDslPackage.JSON_FILE:
				sequence_JSonFile(context, (JSonFile) semanticObject); 
				return; 
			case MyDslPackage.JSON_NULL:
				sequence_JSonNull(context, (JSonNull) semanticObject); 
				return; 
			case MyDslPackage.JSON_OBJECT:
				sequence_JSonObject_Impl(context, (JSonObject) semanticObject); 
				return; 
			case MyDslPackage.JSON_STRING:
				sequence_JSonString(context, (JSonString) semanticObject); 
				return; 
			case MyDslPackage.JSON_ARRAY:
				sequence_JsonArray(context, (JsonArray) semanticObject); 
				return; 
			case MyDslPackage.JSON_BOOLEAN:
				sequence_JsonBoolean(context, (JsonBoolean) semanticObject); 
				return; 
			case MyDslPackage.JSON_INTEGER:
				sequence_JsonInteger(context, (JsonInteger) semanticObject); 
				return; 
			case MyDslPackage.LOAD:
				sequence_Load(context, (Load) semanticObject); 
				return; 
			case MyDslPackage.MODIFY:
				sequence_Modify(context, (Modify) semanticObject); 
				return; 
			case MyDslPackage.MULT:
				sequence_Mult(context, (Mult) semanticObject); 
				return; 
			case MyDslPackage.OPERATION:
				sequence_Operation_Impl(context, (Operation) semanticObject); 
				return; 
			case MyDslPackage.PROJECTION:
				sequence_Projection(context, (Projection) semanticObject); 
				return; 
			case MyDslPackage.REMOVE:
				sequence_Remove(context, (Remove) semanticObject); 
				return; 
			case MyDslPackage.SELECT:
				sequence_Select(context, (Select) semanticObject); 
				return; 
			case MyDslPackage.SIMPLE_ATTRIBUT:
				sequence_SimpleAttribut_Impl(context, (SimpleAttribut) semanticObject); 
				return; 
			case MyDslPackage.STORE:
				sequence_Store(context, (Store) semanticObject); 
				return; 
			case MyDslPackage.SUB:
				sequence_Sub(context, (Sub) semanticObject); 
				return; 
			case MyDslPackage.SUBSET:
				sequence_Subset(context, (Subset) semanticObject); 
				return; 
			case MyDslPackage.SUM:
				sequence_Sum(context, (Sum) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Commandes_Impl returns Commandes
	 *
	 * Constraint:
	 *     (jsonfile+=[JSonFile|ID] jsonfile+=[JSonFile|ID]*)?
	 */
	protected void sequence_Commandes_Impl(ISerializationContext context, Commandes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JSonObject returns ComplexAttribut
	 *     ComplexAttribut returns ComplexAttribut
	 *     JSonAttribut returns ComplexAttribut
	 *     ComplexAttribut_Impl returns ComplexAttribut
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_ComplexAttribut_Impl(ISerializationContext context, ComplexAttribut semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.JSON_ATTRIBUT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.JSON_ATTRIBUT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComplexAttribut_ImplAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Display returns Display
	 *
	 * Constraint:
	 *     ((jsonfile+=[JSonFile|ID] jsonfile+=[JSonFile|ID]*)? node=[JSonObject|ID])
	 */
	protected void sequence_Display(ISerializationContext context, Display semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JSonObject returns Div
	 *     JSonAttribut returns Div
	 *     Div returns Div
	 *
	 * Constraint:
	 *     (name=STRING Contient+=[JsonInteger|ID] Contient+=[JsonInteger|ID]*)
	 */
	protected void sequence_Div(ISerializationContext context, Div semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EBoolean returns EBoolean
	 *
	 * Constraint:
	 *     {EBoolean}
	 */
	protected void sequence_EBoolean(ISerializationContext context, EBoolean semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Insert returns Insert
	 *
	 * Constraint:
	 *     (value=STRING? (jsonfile+=[JSonFile|ID] jsonfile+=[JSonFile|ID]*)? node=[JSonObject|ID] complexattribut=[ComplexAttribut|ID])
	 */
	protected void sequence_Insert(ISerializationContext context, Insert semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JSonObject returns JSonAttribut
	 *     JSonAttribut returns JSonAttribut
	 *     JSonAttribut_Impl returns JSonAttribut
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_JSonAttribut_Impl(ISerializationContext context, JSonAttribut semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.JSON_ATTRIBUT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.JSON_ATTRIBUT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJSonAttribut_ImplAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JSonObject returns JSonEnum
	 *     ComplexAttribut returns JSonEnum
	 *     JSonAttribut returns JSonEnum
	 *     JSonEnum returns JSonEnum
	 *
	 * Constraint:
	 *     (name=STRING Contient+=JSonAttribut Contient+=JSonAttribut*)
	 */
	protected void sequence_JSonEnum(ISerializationContext context, JSonEnum semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JSonFile returns JSonFile
	 *
	 * Constraint:
	 *     (name=STRING Contient+=JSonObject*)
	 */
	protected void sequence_JSonFile(ISerializationContext context, JSonFile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JSonObject returns JSonNull
	 *     JSonAttribut returns JSonNull
	 *     JSonNull returns JSonNull
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_JSonNull(ISerializationContext context, JSonNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.JSON_ATTRIBUT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.JSON_ATTRIBUT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJSonNullAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JSonObject_Impl returns JSonObject
	 *
	 * Constraint:
	 *     {JSonObject}
	 */
	protected void sequence_JSonObject_Impl(ISerializationContext context, JSonObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JSonObject returns JSonString
	 *     JSonAttribut returns JSonString
	 *     JSonString returns JSonString
	 *
	 * Constraint:
	 *     (name=STRING value=STRING?)
	 */
	protected void sequence_JSonString(ISerializationContext context, JSonString semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JSonObject returns JsonArray
	 *     ComplexAttribut returns JsonArray
	 *     JSonAttribut returns JsonArray
	 *     JsonArray returns JsonArray
	 *
	 * Constraint:
	 *     (name=STRING Contient+=JSonAttribut Contient+=JSonAttribut*)
	 */
	protected void sequence_JsonArray(ISerializationContext context, JsonArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JSonObject returns JsonBoolean
	 *     JSonAttribut returns JsonBoolean
	 *     JsonBoolean returns JsonBoolean
	 *
	 * Constraint:
	 *     (value?='value'? name=STRING)
	 */
	protected void sequence_JsonBoolean(ISerializationContext context, JsonBoolean semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JSonObject returns JsonInteger
	 *     JSonAttribut returns JsonInteger
	 *     JsonInteger returns JsonInteger
	 *
	 * Constraint:
	 *     (name=STRING value=INT)
	 */
	protected void sequence_JsonInteger(ISerializationContext context, JsonInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.JSON_ATTRIBUT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.JSON_ATTRIBUT__NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.JSON_INTEGER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.JSON_INTEGER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsonIntegerAccess().getNameSTRINGTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getJsonIntegerAccess().getValueINTTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Load returns Load
	 *
	 * Constraint:
	 *     (path=STRING? (jsonfile+=[JSonFile|ID] jsonfile+=[JSonFile|ID]*)?)
	 */
	protected void sequence_Load(ISerializationContext context, Load semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Modify returns Modify
	 *
	 * Constraint:
	 *     (value=STRING? (jsonfile+=[JSonFile|ID] jsonfile+=[JSonFile|ID]*)? node+=[JSonObject|ID] node+=[JSonObject|ID]*)
	 */
	protected void sequence_Modify(ISerializationContext context, Modify semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JSonObject returns Mult
	 *     JSonAttribut returns Mult
	 *     Mult returns Mult
	 *
	 * Constraint:
	 *     (name=STRING listInterger+=JsonInteger listInterger+=JsonInteger*)
	 */
	protected void sequence_Mult(ISerializationContext context, Mult semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JSonObject returns Operation
	 *     JSonAttribut returns Operation
	 *     Operation_Impl returns Operation
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_Operation_Impl(ISerializationContext context, Operation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.JSON_ATTRIBUT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.JSON_ATTRIBUT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOperation_ImplAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Projection returns Projection
	 *
	 * Constraint:
	 *     (name=STRING (jsonfile+=[JSonFile|ID] jsonfile+=[JSonFile|ID]*)? node=[JSonObject|ID])
	 */
	protected void sequence_Projection(ISerializationContext context, Projection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Remove returns Remove
	 *
	 * Constraint:
	 *     ((jsonfile+=[JSonFile|ID] jsonfile+=[JSonFile|ID]*)? node=[JSonObject|ID])
	 */
	protected void sequence_Remove(ISerializationContext context, Remove semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Select returns Select
	 *
	 * Constraint:
	 *     (name=STRING (jsonfile+=[JSonFile|ID] jsonfile+=[JSonFile|ID]*)? node=[JSonObject|ID])
	 */
	protected void sequence_Select(ISerializationContext context, Select semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JSonObject returns SimpleAttribut
	 *     JSonAttribut returns SimpleAttribut
	 *     SimpleAttribut_Impl returns SimpleAttribut
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_SimpleAttribut_Impl(ISerializationContext context, SimpleAttribut semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.JSON_ATTRIBUT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.JSON_ATTRIBUT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSimpleAttribut_ImplAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Store returns Store
	 *
	 * Constraint:
	 *     (name=STRING path=STRING? (jsonfile+=[JSonFile|ID] jsonfile+=[JSonFile|ID]*)?)
	 */
	protected void sequence_Store(ISerializationContext context, Store semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JSonObject returns Sub
	 *     JSonAttribut returns Sub
	 *     Sub returns Sub
	 *
	 * Constraint:
	 *     (name=STRING listInterger+=[JsonInteger|ID] listInterger+=[JsonInteger|ID]*)
	 */
	protected void sequence_Sub(ISerializationContext context, Sub semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Subset returns Subset
	 *
	 * Constraint:
	 *     (name=STRING (jsonfile+=[JSonFile|ID] jsonfile+=[JSonFile|ID]*)? listNodes+=[JSonObject|ID] listNodes+=[JSonObject|ID]*)
	 */
	protected void sequence_Subset(ISerializationContext context, Subset semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JSonObject returns Sum
	 *     JSonAttribut returns Sum
	 *     Sum returns Sum
	 *
	 * Constraint:
	 *     (name=STRING listInterger+=[JsonInteger|ID] listInterger+=[JsonInteger|ID]*)
	 */
	protected void sequence_Sum(ISerializationContext context, Sum semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
