/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.myDsl.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtext.example.mydsl.myDsl.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtext.example.mydsl.myDsl.MyDslPackage
 * @generated
 */
public class MyDslSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MyDslPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = MyDslPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case MyDslPackage.MAIN_GRAMMAR:
      {
        MainGrammar mainGrammar = (MainGrammar)theEObject;
        T result = caseMainGrammar(mainGrammar);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.JSON_FILE:
      {
        JSonFile jSonFile = (JSonFile)theEObject;
        T result = caseJSonFile(jSonFile);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.COMMANDES:
      {
        Commandes commandes = (Commandes)theEObject;
        T result = caseCommandes(commandes);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.JSON_OBJECT:
      {
        JSonObject jSonObject = (JSonObject)theEObject;
        T result = caseJSonObject(jSonObject);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.JSON_ATTRIBUT:
      {
        JSonAttribut jSonAttribut = (JSonAttribut)theEObject;
        T result = caseJSonAttribut(jSonAttribut);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.JSON_ENUM_FIELD:
      {
        JSonEnumField jSonEnumField = (JSonEnumField)theEObject;
        T result = caseJSonEnumField(jSonEnumField);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STORE:
      {
        Store store = (Store)theEObject;
        T result = caseStore(store);
        if (result == null) result = caseCommandes(store);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.LOAD:
      {
        Load load = (Load)theEObject;
        T result = caseLoad(load);
        if (result == null) result = caseCommandes(load);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DISPLAY:
      {
        Display display = (Display)theEObject;
        T result = caseDisplay(display);
        if (result == null) result = caseCommandes(display);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.SUBSET:
      {
        Subset subset = (Subset)theEObject;
        T result = caseSubset(subset);
        if (result == null) result = caseCommandes(subset);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PROJECTION:
      {
        Projection projection = (Projection)theEObject;
        T result = caseProjection(projection);
        if (result == null) result = caseCommandes(projection);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.INSERT:
      {
        Insert insert = (Insert)theEObject;
        T result = caseInsert(insert);
        if (result == null) result = caseCommandes(insert);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.REMOVE:
      {
        Remove remove = (Remove)theEObject;
        T result = caseRemove(remove);
        if (result == null) result = caseCommandes(remove);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.MODIFY:
      {
        Modify modify = (Modify)theEObject;
        T result = caseModify(modify);
        if (result == null) result = caseCommandes(modify);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.JSON_ARRAY:
      {
        JsonArray jsonArray = (JsonArray)theEObject;
        T result = caseJsonArray(jsonArray);
        if (result == null) result = caseJSonObject(jsonArray);
        if (result == null) result = caseJSonAttribut(jsonArray);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.JSON_ENUM:
      {
        JSonEnum jSonEnum = (JSonEnum)theEObject;
        T result = caseJSonEnum(jSonEnum);
        if (result == null) result = caseJSonObject(jSonEnum);
        if (result == null) result = caseJSonAttribut(jSonEnum);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.JSON_INTEGER:
      {
        JsonInteger jsonInteger = (JsonInteger)theEObject;
        T result = caseJsonInteger(jsonInteger);
        if (result == null) result = caseJSonObject(jsonInteger);
        if (result == null) result = caseJSonAttribut(jsonInteger);
        if (result == null) result = caseJSonEnumField(jsonInteger);
        if (result == null) result = caseJSonOperator(jsonInteger);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.JSON_BOOLEAN:
      {
        JsonBoolean jsonBoolean = (JsonBoolean)theEObject;
        T result = caseJsonBoolean(jsonBoolean);
        if (result == null) result = caseJSonObject(jsonBoolean);
        if (result == null) result = caseJSonAttribut(jsonBoolean);
        if (result == null) result = caseJSonEnumField(jsonBoolean);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.JSON_STRING:
      {
        JSonString jSonString = (JSonString)theEObject;
        T result = caseJSonString(jSonString);
        if (result == null) result = caseJSonObject(jSonString);
        if (result == null) result = caseJSonAttribut(jSonString);
        if (result == null) result = caseJSonEnumField(jSonString);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.JSON_NULL:
      {
        JSonNull jSonNull = (JSonNull)theEObject;
        T result = caseJSonNull(jSonNull);
        if (result == null) result = caseJSonObject(jSonNull);
        if (result == null) result = caseJSonAttribut(jSonNull);
        if (result == null) result = caseJSonEnumField(jSonNull);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.JSON_OPERATOR:
      {
        JSonOperator jSonOperator = (JSonOperator)theEObject;
        T result = caseJSonOperator(jSonOperator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.SUM:
      {
        Sum sum = (Sum)theEObject;
        T result = caseSum(sum);
        if (result == null) result = caseJSonObject(sum);
        if (result == null) result = caseJSonAttribut(sum);
        if (result == null) result = caseJSonEnumField(sum);
        if (result == null) result = caseJSonOperator(sum);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DIV:
      {
        Div div = (Div)theEObject;
        T result = caseDiv(div);
        if (result == null) result = caseJSonObject(div);
        if (result == null) result = caseJSonAttribut(div);
        if (result == null) result = caseJSonEnumField(div);
        if (result == null) result = caseJSonOperator(div);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.MULT:
      {
        Mult mult = (Mult)theEObject;
        T result = caseMult(mult);
        if (result == null) result = caseJSonObject(mult);
        if (result == null) result = caseJSonAttribut(mult);
        if (result == null) result = caseJSonEnumField(mult);
        if (result == null) result = caseJSonOperator(mult);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.SUB:
      {
        Sub sub = (Sub)theEObject;
        T result = caseSub(sub);
        if (result == null) result = caseJSonObject(sub);
        if (result == null) result = caseJSonAttribut(sub);
        if (result == null) result = caseJSonEnumField(sub);
        if (result == null) result = caseJSonOperator(sub);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EBOOLEAN:
      {
        EBoolean eBoolean = (EBoolean)theEObject;
        T result = caseEBoolean(eBoolean);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Main Grammar</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Main Grammar</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMainGrammar(MainGrammar object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>JSon File</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>JSon File</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJSonFile(JSonFile object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Commandes</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Commandes</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCommandes(Commandes object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>JSon Object</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>JSon Object</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJSonObject(JSonObject object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>JSon Attribut</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>JSon Attribut</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJSonAttribut(JSonAttribut object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>JSon Enum Field</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>JSon Enum Field</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJSonEnumField(JSonEnumField object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Store</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Store</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStore(Store object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Load</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Load</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLoad(Load object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Display</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Display</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDisplay(Display object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Subset</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Subset</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubset(Subset object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Projection</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Projection</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProjection(Projection object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Insert</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Insert</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInsert(Insert object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Remove</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Remove</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRemove(Remove object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Modify</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Modify</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModify(Modify object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Json Array</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Json Array</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJsonArray(JsonArray object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>JSon Enum</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>JSon Enum</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJSonEnum(JSonEnum object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Json Integer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Json Integer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJsonInteger(JsonInteger object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Json Boolean</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Json Boolean</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJsonBoolean(JsonBoolean object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>JSon String</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>JSon String</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJSonString(JSonString object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>JSon Null</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>JSon Null</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJSonNull(JSonNull object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>JSon Operator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>JSon Operator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJSonOperator(JSonOperator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sum</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sum</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSum(Sum object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Div</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Div</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDiv(Div object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mult</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mult</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMult(Mult object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sub</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sub</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSub(Sub object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EBoolean</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EBoolean</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEBoolean(EBoolean object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //MyDslSwitch
