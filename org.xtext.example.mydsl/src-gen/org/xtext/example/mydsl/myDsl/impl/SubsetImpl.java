/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.myDsl.JSonFile;
import org.xtext.example.mydsl.myDsl.JSonObject;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.Subset;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Subset</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.SubsetImpl#getJsonfile <em>Jsonfile</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.SubsetImpl#getListNodes <em>List Nodes</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SubsetImpl extends CommandesImpl implements Subset
{
  /**
   * The cached value of the '{@link #getJsonfile() <em>Jsonfile</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJsonfile()
   * @generated
   * @ordered
   */
  protected EList<JSonFile> jsonfile;

  /**
   * The cached value of the '{@link #getListNodes() <em>List Nodes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getListNodes()
   * @generated
   * @ordered
   */
  protected EList<JSonObject> listNodes;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SubsetImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.SUBSET;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<JSonFile> getJsonfile()
  {
    if (jsonfile == null)
    {
      jsonfile = new EObjectContainmentEList<JSonFile>(JSonFile.class, this, MyDslPackage.SUBSET__JSONFILE);
    }
    return jsonfile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<JSonObject> getListNodes()
  {
    if (listNodes == null)
    {
      listNodes = new EObjectContainmentEList<JSonObject>(JSonObject.class, this, MyDslPackage.SUBSET__LIST_NODES);
    }
    return listNodes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.SUBSET__JSONFILE:
        return ((InternalEList<?>)getJsonfile()).basicRemove(otherEnd, msgs);
      case MyDslPackage.SUBSET__LIST_NODES:
        return ((InternalEList<?>)getListNodes()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.SUBSET__JSONFILE:
        return getJsonfile();
      case MyDslPackage.SUBSET__LIST_NODES:
        return getListNodes();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.SUBSET__JSONFILE:
        getJsonfile().clear();
        getJsonfile().addAll((Collection<? extends JSonFile>)newValue);
        return;
      case MyDslPackage.SUBSET__LIST_NODES:
        getListNodes().clear();
        getListNodes().addAll((Collection<? extends JSonObject>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.SUBSET__JSONFILE:
        getJsonfile().clear();
        return;
      case MyDslPackage.SUBSET__LIST_NODES:
        getListNodes().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.SUBSET__JSONFILE:
        return jsonfile != null && !jsonfile.isEmpty();
      case MyDslPackage.SUBSET__LIST_NODES:
        return listNodes != null && !listNodes.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //SubsetImpl
