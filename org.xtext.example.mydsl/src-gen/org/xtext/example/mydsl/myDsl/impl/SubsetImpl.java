/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.Subset;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Subset</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.SubsetImpl#getNodenamesub <em>Nodenamesub</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.SubsetImpl#getKeynamesub <em>Keynamesub</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SubsetImpl extends CommandesImpl implements Subset
{
  /**
   * The default value of the '{@link #getNodenamesub() <em>Nodenamesub</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodenamesub()
   * @generated
   * @ordered
   */
  protected static final String NODENAMESUB_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNodenamesub() <em>Nodenamesub</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodenamesub()
   * @generated
   * @ordered
   */
  protected String nodenamesub = NODENAMESUB_EDEFAULT;

  /**
   * The cached value of the '{@link #getKeynamesub() <em>Keynamesub</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getKeynamesub()
   * @generated
   * @ordered
   */
  protected EList<String> keynamesub;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SubsetImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.SUBSET;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getNodenamesub()
  {
    return nodenamesub;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNodenamesub(String newNodenamesub)
  {
    String oldNodenamesub = nodenamesub;
    nodenamesub = newNodenamesub;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SUBSET__NODENAMESUB, oldNodenamesub, nodenamesub));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getKeynamesub()
  {
    if (keynamesub == null)
    {
      keynamesub = new EDataTypeEList<String>(String.class, this, MyDslPackage.SUBSET__KEYNAMESUB);
    }
    return keynamesub;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.SUBSET__NODENAMESUB:
        return getNodenamesub();
      case MyDslPackage.SUBSET__KEYNAMESUB:
        return getKeynamesub();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.SUBSET__NODENAMESUB:
        setNodenamesub((String)newValue);
        return;
      case MyDslPackage.SUBSET__KEYNAMESUB:
        getKeynamesub().clear();
        getKeynamesub().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.SUBSET__NODENAMESUB:
        setNodenamesub(NODENAMESUB_EDEFAULT);
        return;
      case MyDslPackage.SUBSET__KEYNAMESUB:
        getKeynamesub().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.SUBSET__NODENAMESUB:
        return NODENAMESUB_EDEFAULT == null ? nodenamesub != null : !NODENAMESUB_EDEFAULT.equals(nodenamesub);
      case MyDslPackage.SUBSET__KEYNAMESUB:
        return keynamesub != null && !keynamesub.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (nodenamesub: ");
    result.append(nodenamesub);
    result.append(", keynamesub: ");
    result.append(keynamesub);
    result.append(')');
    return result.toString();
  }

} //SubsetImpl
