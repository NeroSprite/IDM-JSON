/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getMainGrammarAccess().getAlternatives(), "rule__MainGrammar__Alternatives");
			builder.put(grammarAccess.getCommandesAccess().getAlternatives_2(), "rule__Commandes__Alternatives_2");
			builder.put(grammarAccess.getJSonObjectAccess().getAlternatives(), "rule__JSonObject__Alternatives");
			builder.put(grammarAccess.getJSonAttributAccess().getAlternatives(), "rule__JSonAttribut__Alternatives");
			builder.put(grammarAccess.getJSonEnumFieldAccess().getAlternatives(), "rule__JSonEnumField__Alternatives");
			builder.put(grammarAccess.getJsonBooleanAccess().getValueAlternatives_2_0(), "rule__JsonBoolean__ValueAlternatives_2_0");
			builder.put(grammarAccess.getJSonOperatorAccess().getAlternatives(), "rule__JSonOperator__Alternatives");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getJSonFileAccess().getGroup(), "rule__JSonFile__Group__0");
			builder.put(grammarAccess.getCommandesAccess().getGroup(), "rule__Commandes__Group__0");
			builder.put(grammarAccess.getStoreAccess().getGroup(), "rule__Store__Group__0");
			builder.put(grammarAccess.getLoadAccess().getGroup(), "rule__Load__Group__0");
			builder.put(grammarAccess.getDisplayAccess().getGroup(), "rule__Display__Group__0");
			builder.put(grammarAccess.getSubsetAccess().getGroup(), "rule__Subset__Group__0");
			builder.put(grammarAccess.getSubsetAccess().getGroup_8(), "rule__Subset__Group_8__0");
			builder.put(grammarAccess.getProjectionAccess().getGroup(), "rule__Projection__Group__0");
			builder.put(grammarAccess.getInsertAccess().getGroup(), "rule__Insert__Group__0");
			builder.put(grammarAccess.getRemoveAccess().getGroup(), "rule__Remove__Group__0");
			builder.put(grammarAccess.getModifyAccess().getGroup(), "rule__Modify__Group__0");
			builder.put(grammarAccess.getJsonArrayAccess().getGroup(), "rule__JsonArray__Group__0");
			builder.put(grammarAccess.getJsonArrayAccess().getGroup_4(), "rule__JsonArray__Group_4__0");
			builder.put(grammarAccess.getJSonEnumAccess().getGroup(), "rule__JSonEnum__Group__0");
			builder.put(grammarAccess.getJSonEnumAccess().getGroup_4(), "rule__JSonEnum__Group_4__0");
			builder.put(grammarAccess.getJsonIntegerAccess().getGroup(), "rule__JsonInteger__Group__0");
			builder.put(grammarAccess.getJsonBooleanAccess().getGroup(), "rule__JsonBoolean__Group__0");
			builder.put(grammarAccess.getJSonStringAccess().getGroup(), "rule__JSonString__Group__0");
			builder.put(grammarAccess.getJSonNullAccess().getGroup(), "rule__JSonNull__Group__0");
			builder.put(grammarAccess.getSumAccess().getGroup(), "rule__Sum__Group__0");
			builder.put(grammarAccess.getSumAccess().getGroup_4(), "rule__Sum__Group_4__0");
			builder.put(grammarAccess.getDivAccess().getGroup(), "rule__Div__Group__0");
			builder.put(grammarAccess.getDivAccess().getGroup_4(), "rule__Div__Group_4__0");
			builder.put(grammarAccess.getMultAccess().getGroup(), "rule__Mult__Group__0");
			builder.put(grammarAccess.getMultAccess().getGroup_4(), "rule__Mult__Group_4__0");
			builder.put(grammarAccess.getSubAccess().getGroup(), "rule__Sub__Group__0");
			builder.put(grammarAccess.getSubAccess().getGroup_4(), "rule__Sub__Group_4__0");
			builder.put(grammarAccess.getEBooleanAccess().getGroup_0(), "rule__EBoolean__Group_0__0");
			builder.put(grammarAccess.getEBooleanAccess().getGroup_1(), "rule__EBoolean__Group_1__0");
			builder.put(grammarAccess.getJSonFileAccess().getNameAssignment_1(), "rule__JSonFile__NameAssignment_1");
			builder.put(grammarAccess.getJSonFileAccess().getContientAssignment_3(), "rule__JSonFile__ContientAssignment_3");
			builder.put(grammarAccess.getStoreAccess().getPathAssignment_3(), "rule__Store__PathAssignment_3");
			builder.put(grammarAccess.getStoreAccess().getNameAssignment_6(), "rule__Store__NameAssignment_6");
			builder.put(grammarAccess.getLoadAccess().getPathAssignment_3(), "rule__Load__PathAssignment_3");
			builder.put(grammarAccess.getLoadAccess().getNameAssignment_6(), "rule__Load__NameAssignment_6");
			builder.put(grammarAccess.getDisplayAccess().getJsonfileAssignment_3(), "rule__Display__JsonfileAssignment_3");
			builder.put(grammarAccess.getDisplayAccess().getNameAssignment_6(), "rule__Display__NameAssignment_6");
			builder.put(grammarAccess.getSubsetAccess().getJsonfileAssignment_3(), "rule__Subset__JsonfileAssignment_3");
			builder.put(grammarAccess.getSubsetAccess().getListNodesAssignment_7(), "rule__Subset__ListNodesAssignment_7");
			builder.put(grammarAccess.getSubsetAccess().getListNodesAssignment_8_1(), "rule__Subset__ListNodesAssignment_8_1");
			builder.put(grammarAccess.getProjectionAccess().getNameAssignment_3(), "rule__Projection__NameAssignment_3");
			builder.put(grammarAccess.getProjectionAccess().getNodeAssignment_6(), "rule__Projection__NodeAssignment_6");
			builder.put(grammarAccess.getInsertAccess().getJsonfileAssignment_4(), "rule__Insert__JsonfileAssignment_4");
			builder.put(grammarAccess.getInsertAccess().getJsonfileAssignment_7(), "rule__Insert__JsonfileAssignment_7");
			builder.put(grammarAccess.getInsertAccess().getNodeAssignment_11(), "rule__Insert__NodeAssignment_11");
			builder.put(grammarAccess.getRemoveAccess().getJsonfileAssignment_3(), "rule__Remove__JsonfileAssignment_3");
			builder.put(grammarAccess.getRemoveAccess().getNodeAssignment_6(), "rule__Remove__NodeAssignment_6");
			builder.put(grammarAccess.getModifyAccess().getJsonfileAssignment_4(), "rule__Modify__JsonfileAssignment_4");
			builder.put(grammarAccess.getModifyAccess().getJsonfileAssignment_7(), "rule__Modify__JsonfileAssignment_7");
			builder.put(grammarAccess.getModifyAccess().getNodeAssignment_11(), "rule__Modify__NodeAssignment_11");
			builder.put(grammarAccess.getJsonArrayAccess().getNameAssignment_1(), "rule__JsonArray__NameAssignment_1");
			builder.put(grammarAccess.getJsonArrayAccess().getContientAssignment_3(), "rule__JsonArray__ContientAssignment_3");
			builder.put(grammarAccess.getJsonArrayAccess().getContientAssignment_4_1(), "rule__JsonArray__ContientAssignment_4_1");
			builder.put(grammarAccess.getJSonEnumAccess().getNameAssignment_1(), "rule__JSonEnum__NameAssignment_1");
			builder.put(grammarAccess.getJSonEnumAccess().getContientAssignment_3(), "rule__JSonEnum__ContientAssignment_3");
			builder.put(grammarAccess.getJSonEnumAccess().getContientAssignment_4_1(), "rule__JSonEnum__ContientAssignment_4_1");
			builder.put(grammarAccess.getJsonIntegerAccess().getNameAssignment_1(), "rule__JsonInteger__NameAssignment_1");
			builder.put(grammarAccess.getJsonIntegerAccess().getValueAssignment_2(), "rule__JsonInteger__ValueAssignment_2");
			builder.put(grammarAccess.getJsonBooleanAccess().getNameAssignment_1(), "rule__JsonBoolean__NameAssignment_1");
			builder.put(grammarAccess.getJsonBooleanAccess().getValueAssignment_2(), "rule__JsonBoolean__ValueAssignment_2");
			builder.put(grammarAccess.getJSonStringAccess().getNameAssignment_1(), "rule__JSonString__NameAssignment_1");
			builder.put(grammarAccess.getJSonStringAccess().getValueAssignment_2(), "rule__JSonString__ValueAssignment_2");
			builder.put(grammarAccess.getJSonNullAccess().getNameAssignment_1(), "rule__JSonNull__NameAssignment_1");
			builder.put(grammarAccess.getSumAccess().getNameAssignment_1(), "rule__Sum__NameAssignment_1");
			builder.put(grammarAccess.getSumAccess().getListIntergerAssignment_3(), "rule__Sum__ListIntergerAssignment_3");
			builder.put(grammarAccess.getSumAccess().getListIntergerAssignment_4_1(), "rule__Sum__ListIntergerAssignment_4_1");
			builder.put(grammarAccess.getDivAccess().getNameAssignment_1(), "rule__Div__NameAssignment_1");
			builder.put(grammarAccess.getDivAccess().getListIntergerAssignment_3(), "rule__Div__ListIntergerAssignment_3");
			builder.put(grammarAccess.getDivAccess().getListIntergerAssignment_4_1(), "rule__Div__ListIntergerAssignment_4_1");
			builder.put(grammarAccess.getMultAccess().getNameAssignment_1(), "rule__Mult__NameAssignment_1");
			builder.put(grammarAccess.getMultAccess().getListIntergerAssignment_3(), "rule__Mult__ListIntergerAssignment_3");
			builder.put(grammarAccess.getMultAccess().getListIntergerAssignment_4_1(), "rule__Mult__ListIntergerAssignment_4_1");
			builder.put(grammarAccess.getSubAccess().getNameAssignment_1(), "rule__Sub__NameAssignment_1");
			builder.put(grammarAccess.getSubAccess().getListIntergerAssignment_3(), "rule__Sub__ListIntergerAssignment_3");
			builder.put(grammarAccess.getSubAccess().getListIntergerAssignment_4_1(), "rule__Sub__ListIntergerAssignment_4_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
