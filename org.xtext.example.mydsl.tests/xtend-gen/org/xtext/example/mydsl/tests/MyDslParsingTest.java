/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.tests;

import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.xtext.example.mydsl.myDsl.MainGrammar;

@ExtendWith(InjectionExtension.class)
@InjectWith(MyDslInjectorProvider.class)
@SuppressWarnings("all")
public class MyDslParsingTest {
  @Inject
  private ParseHelper<MainGrammar> parseHelper;
  
  /**
   * @Test
   * def void OperationTest() {
   * val result = parseHelper.parse("JSonFile \"Name\" {
   * Sum\"Name\"[
   * Integer \"fr\" 1,
   * Integer \"Name\" 5 ,
   * Div\"Name2\"[
   * Integer \"fr2\" 1,
   * Integer \"Name3\" 5
   * ]
   * ]
   * }");
   * Assertions.assertNotNull(result)
   * val errors = result.eResource.errors
   * //Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
   * 
   * val JavaCompiler cmpJava = new JavaCompiler(result)
   * cmpJava.compileAndRun
   * }
   */
  @Test
  public void DEBUGtest() {
    try {
      final MainGrammar result = this.parseHelper.parse("JSonFile \"File\" {\n\tJSonArray \"MyArray\" {\n\t\tInteger \"MyInteger\" 2  \n\t\t}\n\t\n}");
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      final JavaCompiler cmpJava = new JavaCompiler(result);
      cmpJava.compileAndRun();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
