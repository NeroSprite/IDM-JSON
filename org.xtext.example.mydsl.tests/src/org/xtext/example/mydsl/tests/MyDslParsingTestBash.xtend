/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import org.xtext.example.mydsl.tests.JavaCompiler
import org.xtext.example.mydsl.myDsl.MainGrammar

@ExtendWith(InjectionExtension)
@InjectWith(MyDslInjectorProvider)
class MyDslParsingTestBash {
	@Inject
	ParseHelper<MainGrammar> parseHelper
/*
	@Test
	def void stringExemple() {
		val result = parseHelper.parse("JSonFile \"File\" {
		String \"Name\"\"Value\"
		}
		");
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		val BashCompiler2 cmpBash = new BashCompiler2(result)
		cmpBash.compileAndRun
	}
	
	@Test
	def void enumExemple() {
		val result = parseHelper.parse('JSonFile "test" {
			JSonEnum "enum" [ String "key" "one" , String "key2" "two"  ]
			}
'
);
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		val BashCompiler2 cmpBash = new BashCompiler2(result)
		cmpBash.compileAndRun
	}
	*/
	 
	
	/* 
	@Test
	def void ArrayTest() {
		val result = parseHelper.parse("JSonFile \"File\" {
	JSonArray \"MyArray\" {
		Integer \"MyInteger\" 2  ,
		Integer \"MyInteger2\" 5 ,
		String \"strng\" \"Value\" ,
		Null \"null\" ,
		JSonArray \"ArrayOther\" {
			Integer \"IntOther\" 2
		},
		Boolean \"BoolValue\" true,
		Div\"divi\"[
		Integer \"divi1\" 1,
		Integer \"divi2\" 5
		],
		Mult\"multi\"[
		Integer \"mult1\" 1,
		Integer \"mult2\" 5,
		Integer \"mult3\" 2
	]
	}
}");
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		val BashCompiler2 cmpBash = new BashCompiler2(result)
		cmpBash.compileAndRun
	}
	*/
	
	 /*
	@Test
	def void ArrayTest() {
		val result = parseHelper.parse("JSonFile \"File\" {
	
		Integer \"MyInteger\" 2  
	
}");
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		val BashCompiler2 cmpBash = new BashCompiler2(result)
		cmpBash.compileAndRun
	}
	*/
	
	
	 
	@Test
	def void Array2Test() {
		val result = parseHelper.parse("JSonFile \"File\" {
	JSonArray \"MyArray\" {
		Integer \"MyInteger\" 2  ,
		Integer \"MyInteger2\" 5 ,
		Boolean \"MyBoolean\" false ,
		Null \"MyNullObject\",
		JSonArray \"MyArray2\" {
		Integer \"integ1\" 2 ,
		JSonArray \"MyArray3\" {
		Integer \"integ2\" 2 ,
		Sum\"sum\"[
		Integer \"sum1\" 1,
		Integer \"sum2\" 5,
		Div\"divi\"[
		Integer \"divi1\" 1,
		Integer \"divi2\" 5
		],
		Mult\"multi\"[
		Integer \"mult1\" 1,
		Integer \"mult2\" 5,
		Integer \"mult3\" 2
	]
		]}
		}
	}
},
Commandes {
Display {
		jsonfileName \"File\"
	}
},
Commandes {
Subset {
		arrayName \"MyArray\",
		keyName \"integ1\",\"integ2\"
	}
},
Commandes {
	Insert {
		targetNode \"MyArray\",
		nameObject \"integ1\"
	}
},
Commandes {
	Modify {
		targetNode \"MyArray\",
		nameObjectRemove \"integ1\",
		nameObject \"integ2\"
	}
},
Commandes {
	Remove {
		targetNode \"MyArray\",
		nameObjectRemove \"integ2\"
	}
},
Commandes {
	Load {
		path \"/home/thomas/Téléchargements\",
		name \"test\"
	}
},
Commandes {
	Store {
		path \"/home/thomas/Téléchargements\",
		name \"test\",
		contenu \"File\"
	}
}");
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
		val BashCompiler2 cmpBash = new BashCompiler2(result)
		cmpBash.compileAndRun
		val JavaCompiler cmpJava = new JavaCompiler(result)
		cmpJava.compileAndRun
	}
	
}
