/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import org.xtext.example.mydsl.tests.JavaCompiler
import org.xtext.example.mydsl.myDsl.MainGrammar

@ExtendWith(InjectionExtension)
@InjectWith(MyDslInjectorProvider)
class MyDslParsingTestBash {
	@Inject
	ParseHelper<MainGrammar> parseHelper

	@Test
	def void stringExemple() {
		val result = parseHelper.parse("JSonFile \"File\" {
		String \"Name\"\"Value\"
		}
		");
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		val BashCompiler2 cmpBash = new BashCompiler2(result)
		cmpBash.compileAndRun
	}
	
	@Test
	def void enumExemple() {
		val result = parseHelper.parse('JSonFile "test" {
			JSonEnum "enum" [ String "key" "one" , String "key2" "two"  ]
			}
'
);
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		val BashCompiler2 cmpBash = new BashCompiler2(result)
		cmpBash.compileAndRun
	}
}
