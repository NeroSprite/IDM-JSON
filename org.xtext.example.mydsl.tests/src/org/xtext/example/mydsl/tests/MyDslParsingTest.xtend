/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import org.xtext.example.mydsl.tests.JavaCompiler
import org.xtext.example.mydsl.myDsl.MainGrammar

@ExtendWith(InjectionExtension)
@InjectWith(MyDslInjectorProvider)
class MyDslParsingTest {
	@Inject
	ParseHelper<MainGrammar> parseHelper
	/*
	@Test
	def void DisplayModel() {
		val result = parseHelper.parse("JSonFile \"Name\" {
	Integer \"i\" 2
},
Commandes {
	Display {
		jsonfileName \"Name\"
	}
}");
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
				
		val JavaCompiler cmpJava = new JavaCompiler(result)
		cmpJava.compileAndRun
	}*/
	
	/*
		@Test
	def void LoadModel() {
		val result = parseHelper.parse("JSonFile \"Name\" {
	Integer \"i\" 2
},
Commandes {
	Load {
		path \"/home/thomas/Téléchargements\",
		name \"test\"
	}
}
");
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
				
		val JavaCompiler cmpJava = new JavaCompiler(result)
		cmpJava.compileAndRun
	}*/
	
	/*
	@Test
	def void EnumModel() {
		val result = parseHelper.parse("JSonFile \"File\" {
	JSonArray\"Tableau\" {
		JSonEnum\"personne1\"[
			Integer \"Age\" 1
		],
		JSonEnum \"personne2\" [
			Integer \"Age\" 2
		]
	}
}
");
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
				
		val JavaCompiler cmpJava = new JavaCompiler(result)
		cmpJava.compileAndRun
	}*/
	
	/*	@Test
	def void ProjectionModel() {
		val result = parseHelper.parse("JSonFile \"File\" {
	JSonArray \"Tab\" {
		String \"Name\"\"Value\"
	}
},
Commandes {
	Projection {
		arrayName \"Tab\",
		keyName \"Name\"
	}
}
");
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')	
		val JavaCompiler cmpJava = new JavaCompiler(result)
		cmpJava.compileAndRun
	}*/
	
	
	/*@Test
	def void InsertTest() {
		val result = parseHelper.parse("JSonFile \"File\" {
	JSonArray \"Tab\" {
		String \"Str\"\"Value\"
	}
	Integer \"Name\" 2
	
},
Commandes {
	Insert {
		targetNode \"Tab\",
		nameObject \"Name\"
	}
}
");
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')	
		val JavaCompiler cmpJava = new JavaCompiler(result)
		cmpJava.compileAndRun
	}*/
	
	/*@Test
	def void RemoveTest() {
		val result = parseHelper.parse("JSonFile \"File\" {
	JSonArray \"Tab\" {
		String \"Str\"\"Value\"
	}
	Integer \"Name\" 2
	
},
Commandes {
	Insert {
		targetNode \"Tab\",
		nameObject \"Name\"
	}
},
Commandes {
	Remove {
		targetNode \"Tab\",
		nameObjectRemove \"Name\"
	}
}
");
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')	
		val JavaCompiler cmpJava = new JavaCompiler(result)
		cmpJava.compileAndRun
	}*/
	
	
	
	@Test
	def void ModifyTest() {
		val result = parseHelper.parse("JSonFile \"File\" {
	JSonArray \"Tab\" {
		String \"Str\"\"Value\"
	}
	Integer \"Name\" 2
	Integer \"Name2\" 2
	
},
Commandes {
	Insert {
		targetNode \"Tab\",
		nameObject \"Name\"
	}
},
Commandes {
	Modify {
		targetNode \"Tab\",
		nameObjectRemove \"Name\",
		nameObject \"Name2\"
	}
}
");
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')	
		val JavaCompiler cmpJava = new JavaCompiler(result)
		cmpJava.compileAndRun
	}
	
	
	
	/*
	@Test
	def void EnumTest() {
		val result = parseHelper.parse("Commandes { Display { jsonfile JSonFile \"Name\" {
	JSonEnum \"enurm\" [
		Integer \"Nae\" 1,
		Sum\"Naf\" [
			Integer \"N\" 2,
			Integer \"e\" 4
		]
	]
} } }");
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		//Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
				
		val JavaCompiler cmpJava = new JavaCompiler(result)
		cmpJava.compileAndRun
	}*/
	/* 
		@Test
	def void DisplayModelJson() {
		val result = parseHelper.parse("JSonFile \"Test\" { String \"Test2\" \"HelloWorld\" }");
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		//Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
				
		val JavaCompiler cmpJava = new JavaCompiler(result)
		cmpJava.compileAndRun
	}*/
	
	
	
	 /*
	@Test
	def void ArrayTest() {
		val result = parseHelper.parse("JSonFile \"File\" {
	JSonArray \"MyArray\" {
		Integer \"MyInteger\" 2  ,
		Integer \"MyInteger2\" 5 ,
		Boolean \"MyBoolean\" false ,
		Null \"MyNullObject\",
		JSonArray \"MyArray2\" {
		Integer \"integ1\" 2 ,
		JSonArray \"MyArray3\" {
		Integer \"integ2\" 2 ,
		Sum\"sum\"[
		Integer \"sum1\" 1,
		Integer \"sum2\" 5,
		Div\"divi\"[
		Integer \"divi1\" 1,
		Integer \"divi2\" 5
		],
		Mult\"multi\"[
		Integer \"mult1\" 1,
		Integer \"mult2\" 5,
		Integer \"mult3\" 2
	]
		]}
		}
	}
}");
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		//Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
				
		val JavaCompiler cmpJava = new JavaCompiler(result)
		cmpJava.compileAndRun
	}*/
	
	/*
	
	@Test
	def void OperationTest() {
		val result = parseHelper.parse("JSonFile \"Name\" {
	Sum\"Name\"[
		Integer \"fr\" 1,
		Integer \"Name\" 5 ,
Div\"Name2\"[
		Integer \"fr2\" 1,
		Integer \"Name3\" 5
	]
	]
}");
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		//Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
			
		val JavaCompiler cmpJava = new JavaCompiler(result)
		cmpJava.compileAndRun
	}
	*/
	
	/* 
	
	@Test
	def void DEBUGtest() {
		val result = parseHelper.parse("JSonFile \"File\" {
	JSonArray \"MyArray\" {
		Integer \"MyInteger\" 2  
		}
	
}");
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		//Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
				
		val JavaCompiler cmpJava = new JavaCompiler(result)
		cmpJava.compileAndRun
	}*/
	
}